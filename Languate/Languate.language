import ALGT.Builtins 

 Languate
**********
 
 Syntax
========


 # ------------------- Types and type constructors -------------------------

 # One or more constructor, comma seperated
constructors    ::= identifierUpper "," constructors | identifierUpper

 # A simple 'set' definition, the type has these constructors
setDefinition ::= "{" constructors "}"

 
 # Defines a new type
typeDeclaration    ::= "type" identifierUpper "=" setDefinition

type    ::= identifierUpper "->" type | identifierUpper

 # ------------------- Expressions -----------------------
 
 
expressionElement  ::= identifierUpper | identifier | "(" expression ")"

expression  ::= expressionElement expression | expressionElement

 # ------------------- Functions -------------------------

commentLine ::= lineChar commentLine | "\n"
 # Docstring comment. First character of the line must be a dash
comment ::=  "-" $commentLine
comments ::= comment comments | comment

 # For now, it is the same as a comment
property ::= ">" $commentLine
properties ::= property properties | property
 
 # The type declaration of a function
declaration ::= identifier ":" type


clause  ::= expression "->" expression
clauses ::= clause "\n" clauses | clause

function ::= comments properties declaration "\n" clauses

 # ------------- meta ------------------
 
stars ::= "*" stars | "*"
 
title   ::= commentLine stars nls

fileElements   ::= fileElement nls fileElements | fileElement "\n"

fileElement ::= function | typeDeclaration

file    ::= nls title fileElements | title fileElements

 # ------------------- Utils, such as the typing environment
 

knownVariables	::= identifier "<-" expression "," knownVariables | "[]"
knownFunctions ::= identifier type clauses "," knownFunctions | "[]"
knownConstructors ::= identifierUpper type "," knownConstructors | "[]"

typingEnv ::= knownFunctions knownConstructors

nl  ::= "\n"
nls ::= nl nls | nl

 Functions
===========


fileToTypingEnv : file -> typingEnv
fileToTypingEnv(_ els) = buildTypes(els)
fileToTypingEnv(_ _ els) = buildTypes(els)

            
buildTypes  : fileElements -> typingEnv
buildTypes(fe _ rest) =  addElement(fe, buildTypes(rest))
buildTypes(fe "\n") =addElement(fe, "[]" "[]")


addElement  : fileElement * typingEnv -> typingEnv
addElement(f : function, env) = addFunction(f, env)
addElement(td : typeDeclaration, env) = addType(td, env)

addFunction : function * typingEnv -> typingEnv
addFunction(_ _ (name ":" type) "\n" clauses, funcs constrs) = (name type clauses "," funcs) constrs
        
addType   : typeDeclaration * typingEnv -> typingEnv
addType("type" type "=" ("{" constructors "}"), env) = addConstrs(type, constructors, env)
            
addConstrs  : type * constructors * typingEnv -> typingEnv
addConstrs(t, identifier "," rest, env)  =addConstr(identifier, t, addConstrs(t, rest, env))
addConstrs(t, (identifier : identifierUpper), env)  = addConstr(identifier, t, env)


addConstr   : identifierUpper * type * typingEnv -> typingEnv
addConstr(c, t, types constr)    = types (c t "," constr)


# Searches the typing environment for the type of a function
searchFuncT	: identifier * knownFunctions -> type
searchFuncT(x, x t _ "," _)		= t
searchFuncT(x, _ _ _ "," rest) 	= searchFuncT(x, rest)

# Searches the typing environment for the clauses of a function
searchFunc	: identifier * knownFunctions -> clauses
searchFunc(x, x _ cl "," _) 	= cl
searchFunc(x, _ _ _ "," rest) 	= searchFunc(x, rest)
	
# Searches the typing environment for constructors
searchCons: identifierUpper * knownConstructors -> type
searchCons(x, x t "," _) 	= t
searchCons(x, _ _ "," rest)	= searchCons(x, rest)


mergeVars	: knownVariables * knownVariables -> knownVariables
mergeVars("[]", vars)		= vars
mergeVars(vars, "[]")		= vars
mergeVars(i "<-" e "," tail, vars)
							= i "<-" e "," mergeVars(tail, vars)
						
						
lookupVar	: knownVariables * identifier -> expression
lookupVar(i "<-" e "," _, i) 	= e
lookupVar(_ "<-" _ "," tail, i)	= lookupVar(tail, i)

	
# All the stuff frequently needed
t       : typingEnv
t = fileToTypingEnv(loadFile("Languate/programs/Bool.lgt", "file") : file)

 Relations
===========

# Evaluate an expression
(->)	: knownVariables (in) * typingEnv (in) * expression (in) * expression (out); Pronounced as "small step"

# Pattern match an expression. First arg is the patter, second is the value
(<-)	: expression (in) * expression (in) * knownVariables (out); Pronounced as "pattern match"

# Type the expression
(::)	: expression (in) * type (out); Pronounced as "type as"

# Type the expression in this environment
(!-) : typingEnv (in) * expression (in) * type (out); Pronounced as "type in environment"

# Type the expression in this environment
(!!) : expression (in) * type (out); Pronounced as "type in bool environment"

# Type the expression in this environment
(!->) : expression (in) * expression (out); Pronounced as "small step in bool environment"

 Rules
=======


 ###### TYPING RULES #####
 
 (!-) "[]" "[]", e, t
----------------------- [Type in an empty environment]
 (::) e, t

 (!-) t(), e, t
----------------------- [Type in the Bool environment]
(!!) e, t

 
------------------------------------------------ [Type variable]
 (!-) vars constr, x, searchFuncT(x, vars)

------------------------------------------------ [Type constructor]
 (!-) vars constr, x, searchCons(x, constr)
 
 
 (!-) env, f, tIn "->" tOut		(!-) env, x, tIn    
 ------------------------------------------------ [Function application]
 (!-) env, f x, tOut
 
 
 
 
--------------------------------------------------- [Pattern match a variable]
(<-) (i : identifier), v, i "<-" v "," "[]"
 
 
 
 
------------------------------------- [Match a constructor]
(<-) (i : identifierUpper), i, "[]" 

 
 
(<-) pattern, value, var	(<-) patterns, values, vars
----------------------------------------------------------- [Recursive pattern match]
(<-) pattern patterns, value values, mergeVars(var, vars)




(<-) pattern, v, vars
-------------------------------- [Remove brackets in pattern]
(<-) "(" pattern ")", v, vars


(<-) pattern, v, vars
-------------------------------- [Remove brackets in expression]
(<-) pattern, "(" v ")", vars




------------------------------------------------- [Lookup variable]
(->) vars, _, v : identifier, lookupVar(vars, v)




------------------------------ [Remove brackets]
(->) _, _, "(" e ")", e


(->) vars, ctx, e0, e1
----------------------------- [Left recursion]
(->) vars, ctx, e0 es, e1 es



(->) vars, ctx, es0, es1
------------------------- [Right recursion]
(->) vars, ctx, e es0, e es1






(->) "[]", t(), e0, e1
------------------------------ [Test]
(!->) e0, e1
