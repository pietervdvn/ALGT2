
 Test Language
*****************

# Blabla

Syntax
======

bool	::= "True" | "False"
int	::= Number

expr	::= bool | int
exprSum	::= expr op exprSum | expr

op	::= "&" | "+" 


tuple	::= expr expr


Functions
=========


not		: bool -> bool
not("True")	= "False"
not("False")	= "True"

and		: bool * bool -> bool
and("True", "True")
		= "True"
and(_, _)	= "False"

nand		: bool * bool -> bool
nand(a, b)	= not(and(a, b))


or		: bool * bool -> bool
or(not("True"), not("True")) = "False"
or(_, _)	= "True"


 Relations
===========

(→) : exprSum (in) * exprSum (out); Pronounced as "smallstep"


 Rules
=======

 -------------------------- [sum]
  (→) expr "+" expr, expr

