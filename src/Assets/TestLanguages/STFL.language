import ALGT.Builtins

 STFL
******

# A simply typed functional language; mainly used for testing purposes

 Syntax
========

baseType	::= "Bool" | "Int" | "(" type ")"
type		::= baseType "->" type | baseType

bool	::= "True" | "False"

var	::= Identifier

lambda	::= "(" "\\" var ":" type "." expr ")"

canon	::= bool | integer | var | lambda

baseExpr ::= canon | "(" expr ")" | "If" expr "Then" expr "Else" expr 

intOp	::= "+" 
boolOp	::= "&" 
sameOp	::= "="

op	::= intOp | boolOp | sameOp

expr	::= baseExpr op expr | baseExpr expr| baseExpr

typingEnv	::= var ":" type typingEnv | "[]"


 Functions
===========

not	: bool -> bool
not("True")	= "False"
not("False")	= "True"


and	: bool * bool -> bool
and("True", "True")	= "True"
and(_, _)		= "False"


# Searches the typing environment
search	: var * typingEnv -> type
search(x, x ":" t _)
	= t
search(x, _ _ _ te)
	= search(x, te)


typeEq	: type * type -> type
typeEq(t, t)
	= t
typeEq("(" t ")", t)
	= t
typeEq(t, "(" t ")")
	= t
typeEq(ta0 "->" tr0, ta1 "->" tr1)
	= typeEq(ta0, ta1) "->" typeEq(tr0, tr1)




subs	: var * expr * expr -> expr
subs(x, x, replacement)
	= replacement
subs(x, "(" "\\" x ":" type "." expr ")", _)
	= "(" "\\" x ":" type "." expr ")"
subs(x, "(" expr ")", replacement)
	= "(" subs(x, expr, replacement) ")"
subs(x, expr0 op expr1, replacement)
	= subs(x, expr0, replacement) op subs(x, expr1, replacement)
subs(x, "If" cond "Then" exprT "Else" exprF, replacement)
	= "If" subs(x, cond, replacement) "Then" subs(x, exprT, replacement) "Else" subs(x, exprF, replacement)



 Relations
===========

(→)	: expr (in) * expr (out)

(::) : expr (in) * type (out) ; Pronounced as "empty env"
(⊢) : typingEnv (in) * expr (in) * type (out)

 Rules
========



----------------------------------------------------------------- [EApp]
 (→) ("(" "\\" x ":" typeDom "." expr ")") arg, subs(x, arg, expr)


------------------------------ [EPar]
 (→) "(" expr ")", expr


 expr0 : bool	expr1 : bool    
------------------------------------------ [EBoolAnd]
 (→) expr0 "&" expr1, and(expr0, expr1)


 expr0 : integer	expr1 : integer    
------------------------------------------ [EIntPlus]
 (→) expr0 "+" expr1, plus(expr0, expr1)



----------------------------------------- [EIfTrue]
 (→) "If" "True" "Then" e0 "Else" e1, e0



----------------------------------------- [EIfFalse]
 (→) "If" "False" "Then" e0 "Else" e1, e1





### ------------------------- Rules about Typing ---------------------


 (⊢) "[]", expr, type
---------------------- [ Type in empty environment ]
 (::) expr, type


 expr : bool
---------------------- [TTrue]
 (⊢) _, expr, "Bool"


 expr : integer
---------------------- [TNumber]
 (⊢) _, expr, "Int"


 x : var
----------------------------- [TVar]
 (⊢) env, x, search(x, env)


 (⊢) x ":" typeDom env, expr, typeCod
-------------------------------------------------------------------- [TLambda]
 (⊢) env, "(" "\\" x ":" typeDom "." expr ")", typeDom "->" typeCod


 (⊢) env, f, tDom "->" tCod	(⊢) env, arg, tArg
------------------------------------------------------- [TApp]
 (⊢) env, f arg, typeEq(tCod, tArg)


 (⊢) env, expr, type
------------------------------ [TPar]
 (⊢) env, "(" expr ")", type


 (⊢) env, expr0, "Bool"	(⊢) env, expr1, "Bool"		op : boolOp       
---------------------------------------------------------------------------- [TBoolInfix]
 (⊢) env, expr0 op expr1, "Bool"



 (⊢) env, expr0, "Int"		(⊢) env, expr1, "Int"		op : intOp
---------------------------------------------------------------------------- [TIntInfix]
 (⊢) env, expr0 op expr1, "Int"


 (⊢) env, expr0, t0	(⊢) env, expr1, t1
-------------------------------------------- [TSameInfix]
 (⊢) env, expr0 op expr1, typeEq(t0, t1)


 (⊢) env, cond, "Bool"		(⊢) env, e0, t0		(⊢) env, e1, t1
--------------------------------------------------------------------------------- [TIf]
 (⊢) env, "If" cond "Then" e0 "Else" e1, typeEq(t0, t1)

