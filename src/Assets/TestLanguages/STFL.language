import ALGT.Builtins

 STFL
******

# A simply typed functional language; mainly used for testing purposes

 Syntax
========


baseType	::= "Bool" | "Int" | "(" type ")"
type		::= baseType "->" type | baseType

bool	::= "True" | "False"

var	::= Identifier

lambda	::= "(" "\\" var ":" type "." expr ")"

canon	::= bool | number | var | lambda

baseExpr ::= canon | "(" expr ")"

intOp	::= "+" 
boolOp	::= "&" 
sameOp	::= "="

op	::= intOp | boolOp | sameOp

expr	::= baseExpr op expr | "If" expr "Then" expr "Else" expr | baseExpr

typingEnv	::= var ":" type typingEnv | "[]"


 Functions
===========

not	: bool -> bool
not("True")	= "False"
not("False")	= "True"


# Searches the typing environment
search	: var * typingEnv -> type
search(x, x ":" t _)
	= t
search(x, _ _ _ te)
	= search(x, te)


 Relations
===========

(→)	: expr (in) * expr (out)

(::) : expr (in) * type (out) ; Pronounced as "empty env"
(⊢) : typingEnv (in) * expr (in) * type (out)

 Rules
========


 (⊢) "[]", expr, type
---------------------- [ Type in empty environment ]
 (::) expr, type


 expr : bool
---------------------- [TTrue]
 (⊢) _, expr, "Bool"


 expr : number
---------------------- [TNumber]
 (⊢) _, expr, "Int"


 x : var
----------------------------- [TVar]
 (⊢) env, x, search(x, env)


 (⊢) x ":" typeDom env, expr, typeCod
-------------------------------------------------------------------- [TLambda]
 (⊢) env, "(" "\\" x ":" typeDom "." expr ")", typeDom "->" typeCod
